# A development environment using Django's built-in runserver instead of uwsgi, using the same production Dockerfile.
# 1. Get a secrets.env file with your dev configuration
# 2. Bring it up with "sudo docker-compose up --build -d"
#   a. If you don't need to host all the dependencies (e.g. you're using a dev db), specify the services you want:
#      "sudo docker-compose up --build -d django worker redis"
# 3. Watch sdtout with "sudo docker logs redpot_django_1 --follow"

# Built on https://docs.docker.com/samples/django/

version: "3.9"

services:
  django:
    image: redpot-dev
    build:
      context: .
      dockerfile: ./Dockerfile
    ports:
      - "8000:8000"
    command: python manage.py runserver 0.0.0.0:8000  # dev server rather than uwsgi
    user: root  # ignore the image's user setting, since we're in dev
    volumes:
      - .:/code

  worker:
    image: redpot-dev
    command: celery -A redpot worker -n redpot-worker
    user: root
    volumes:
      - .:/code

  redis:
    image: redis:6.2
    restart: always

  mssql:
    image: mcr.microsoft.com/mssql/server:2019-latest
    environment:
     - MSSQL_SA_PASSWORD=Test@only
     - ACCEPT_EULA=Y
