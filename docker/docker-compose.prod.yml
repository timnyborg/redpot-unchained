# Production stack, hosting redpot on http :8000

# Overridable variables (with environment variables locally, or gitlab CI/CD variables in deployment):
#  REDPOT_IMAGE: the registry url of the redpot image to be deployed.
#     When run by a gitlab pipeline, this is set to the image created by the branch, allowing rollbacks.
#     e.g. gitlab.conted.ox.ac.uk:5050/django/redpot-unchained/redpot:<branchname>-<commit hash>
#  STATIC_FOLDER: the path to a host folder with /media & /static subfolders, all owned by the REDPOT_DOCKER_USER user.
#     This allows static content to be served by NGINX, sitting outside docker.
#     e.g. /srv/redpot
#  REDPOT_DOCKER_USER: the user with access to the STATIC_FOLDER folder and its subfolders, e.g. www-data
#  SETTINGS_TIMESTAMP: a workaround to allow updating secrets.env with `docker stack deploy`.
#     Secrets are immutable, so we have gitlab create a new name each time with a timestamp

#  Requires:
#    The folder specified by STATIC_FOLDER must exist on the host.
#    It needs to have /static and /media subfolders, all accessible by REDPOT_DOCKER_USER
#    If it's not in place, the django & worker services will fail to start, due to a bad bind mount configuration, or
#    permission denied on those folders.

version: "3.9"
services:
  django:
    image: ${REDPOT_IMAGE:-gitlab.conted.ox.ac.uk:5050/django/redpot-unchained/redpot:latest}
    secrets:
      - source: app_config
        target: /code/secrets.env
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 5s
        order: start-first
        failure_action: rollback
    healthcheck:
      test: curl localhost:8000/  # todo: a lightweight /healthcheck endpoint
      interval: "15s"  # compromise between quick "start" and long "running" healthchecks.  Docker doesn't let you pick both
      timeout: "3s"
      retries: 3
    ports:
      - 8000:8000
    user: ${REDPOT_DOCKER_USER:-www-data:www-data}  # uid:gid for permissions on bind mounts
    entrypoint: ["/code/docker/prod_static_entrypoint.sh", "uwsgi"]
    volumes:
      - ${STATIC_FOLDER:-/srv/redpot}/static:/volumes/static
      - ${STATIC_FOLDER:-/srv/redpot}/media:/volumes/media

  worker:
    image: ${REDPOT_IMAGE:-gitlab.conted.ox.ac.uk:5050/django/redpot-unchained/redpot:latest}
    secrets:
      - source: app_config
        target: /code/secrets.env
    # beats embedded, since we use one worker node.  to scale up the worker containers, add a separate beats container
    command: celery -A redpot worker --beat
    deploy:
      update_config:
        order: stop-first  # avoid multiple beats processes
        failure_action: rollback
    user: ${REDPOT_DOCKER_USER:-www-data:www-data}  # uid:gid for permissions on bind mounts
    volumes:
      - ${STATIC_FOLDER:-/srv/redpot}/media:/volumes/media

  redis:
    image: redis:6.2
    deploy:
      update_config:
        order: start-first
        failure_action: rollback
    volumes:
      - redis_data:/data
    command:  # act as an lru cache
      - redis-server
      - --maxmemory ${REDIS_MAXMEMORY:-500mb}
      - --maxmemory-policy allkeys-lru

secrets:
  app_config:
    file: ../secrets.env
    name: settings-${SETTINGS_TIMESTAMP:-0}

volumes:
  redis_data:
